176,113 tech salaries visualized â€“ a dataviz dashboard
======================================================

https://github.com/Swizec/h1b-software-salaries/tree/modern-code

Show a Preloader
----------------

import bootstrap css in index.js
// src/index.js
import React from "react"
import ReactDOM from "react-dom"
import App from "./App"
// Insert the line(s) between here...
import "bootstrap/dist/css/bootstrap.css"
// ...and here.
ReactDOM.render(<App />, document.getElementById('root'))

Another benefit of Webpack
- importing stylesheets turn into style tags with CSS in their body in runtime

index.js
- load App and React
- load styles
- Use ReactDOM to render <App /> into the DOM


Load and Parse your data
------------------------
load data async using d3 csv parse script 

App.js
import d3, lodash (utility)
loadAllData from DataHandling
- keep code organize and clean
- we will create this file

// defining whats in your component state in advance makes your code easier to read
// people know what to expect
useState
- medianIncomes 
- countyNames

// useEffect to run when React first mounts the component
loadAllData((data) => {
  // get techSalaries, medianIncomes, countyNames
  setTechsalaries
  setMedianIncomes
  setCountyNames
})
- when loadAllData runs, it will fetch data, parse data and update state
- tie data loading to component mounts cuz it means you arent making requests you'll never use
- use state setters in the cb
- this updates Apps state and triggers a re-render -> updates our entire viz via props

h1
- Loaded {techSalaries.length} salaries
- render this message to show our data finished loading

D3 v5 
- updated its data loading methods to use promises instead of callbacks
d3.csv('filename').then(data => ...)
- the promise resolves your data or throws an error

loadAllData = async () => {
  const datasets = await Promise.all([
    d3.json('data/us.json'),
    d3.csv('data/....csv', cleanCounty),
    d3.csv('data/....csv', cleanIncome),
    ...
    d3.tsv('data/us-state-names.tsv', cleanUSStateName)
  ])
}
- d3 fetches the data, then on the promise return, it accepts a callback
- in this callback, well pass in our util method to clean up the data returned

D3 supporsts formats like json, csv, tsv, text, and xml out of the box

tie the data together
// DataHandling.js
async load the data
get the data
1 prep the App
- async loadData from DataHandling.js
2 prep data parsing functions
- data cleaning functions
3 load the dataset
- async loadAllData
- pass in cleaning functions as callbacks
4 tie all dataset together
- use lodash to filter and group before returning a data as part of loadAllData

_.groupBy build dictionary maps


Render a choropleth map of the US
---------------------------------

cloropleth map shows different regions of the map with different colors
color the median of household income with different shades of blue
- the darker the blue, the higher the difference

1 prep the app
- import CountyMap from component/CountyMap which doesn't exist yet
- add countyValue method to App
d3.median(salaries, (d) => d.base_salary)
- will tell us the median

filteredSalaries 
- add after useEffect
- filters after it loads

zoom = null
- start with null

add svg map

recap
- add an import
- add a helper method or two
- update render
-- prep a list of county values
-- remove the "data loaded" indicator
-- render a map


Step 1.1 simplify App state
topoJSON
- geographical data parser to render a map

const [datasets, setDatasets] = useState({
  techSalaries: [],
  medianIncomes: [],
  countyNames: [],
  usTopoJson: null,
  USStateNames: null
})

const { destructure all of the above } = datasets;

async function loadData() {
  const datasets = await loadAllData();
  setDatasets(datasets);
}
- this renders the component once instead of 5 times in a row

Step 3 CountyMap
- create new component CountyMap
- import d3, topojson, lodash

projection = d3.geoAlbersUsa().scale(1280)
- geoAlbersUsa renders USA
- d3 offers many other projections
https://github.com/d3/d3-geo#projections

d3.geoPath().projection(projection)
- path generator that takes geographical data, a projection and returns everything you need to draw a map
- generator takes a projection and returns a function that generates the d attribute of <path> elements
-- general way to specify SVG shapes

d3.scaleQuantize
- splits dataset into chunks based on input
- easy way to have different layers of color
- scaleQuantize is a D3 scale
- this one splits a domain into 9 quantiles and assigns them specific values from the range
-- lets say the domain goes from 0 to 90
-- calling any number btw 0-9 would return 1
-- any number btw 10-19 would return 2
- use to pick colors from an array

GeoJSON is geo data defined with JSON
TopoJSON is a geographical data format based on JSON
- topojson-client library translate geographical datasets into GeoJSON
- TopoJSON produces smaller files
- GeoJSON can be fed directly into D3's geo functions


--- The magic sauce

before we would use static getDerivedStateFromProps to render the projection
- now we use useMemo

projection
- move projection to the center of the map
- scaling it so that it looks ok on the map
- something you experiment with and come up with your own scale as it is different for each use case

if zoom and usTopoJson is available
- zoom into a specific county
- we'll make this available to the users later when we add interaction

centroid
- a function of d3 that lets you center a map on a specific county
- when that happens, we also have to translate the map


-- rendering

calc the mesh from topojson, the part that's being rendered
- mesh renders the areas for the US
- feature renders the lines

use TopoJSON library to grab data out of usTopoJson dataset
- mesh and feature are just what you get back, borders adn flat areas
- mesh
-- calcs a mesh for US States
-- a thin line around the edges
- feature
-- calcs feature for each count
-- fill in with color

// build dictionary that maps county id to value
const countyValueMap = _.fromPairs(values.map((d) => [d.countyID, d.value]));
- optimize by building a map beforehand

return
- loops through list of counties and renders County component
County component
- gets a bunch of attributes and returns a <path>

US state borders
- render a single <path/> element and use geoPath to generate the d attribute


-- step 4 County component
define county helper method component in countyMap
- built from 2 parts
-- imports & color constants
-- a component that returns a <path>

// render uses quantize scale to pick right color
  if (value) {
    color = ChoroplethColors[quantize(value)];
  }

  // return path element
  return (
    <path d={geoPath(feature)} style={{ fill: color }} title={feature.id} />
  )
  - geoPath generates d attribute
  - set fill style to color
  - give path a title


-- Optimize D3
we can use useMemo and custom hooks to clean this up and make sure that d3 doesn't get rendered with every update

const useQuantize = (values) => {
  return useMemo(() => {
    const scale = d3.scaleQuantize().range(d3.range(9))
    if (values) {
      // this is very slow part as we can be iterating over hundreds of thousands of data points
      scale.domain([
        d3.quantile(values, 0.15, (d) => d.value),
        d3.quantile(values, 0.85, (d) => d.value)
      ])
    }
    return scale;
  }, [values]);
}
- useMemo and recalc scale only if values change otherwise always return regular scale

const quantize = useQuantize(values)

memoize
- translation
- projection

useProjection
- move projection and zoom into this custom hook


Render Histogram of salaries
----------------------------

histogram 
- make histogram component
- add Axis using blackbox approach
- add some styling

--- Step 1 prep app.js
import Histogram that we haven't created yet
add Histogram component in svg
- add bins how many bars we want
- data={filteredSalaries}
- value={(d) => d.base_salary}
-- dynamic
-- value exisor on how to get the value from the dataset


--- Step 2 Css changes
style svg with css

for now use global stylesheet


--- Step 3 Histogram component
Histogram component
- destructure the props

histogram = d3.histogram()
- histogram generator
- take some data and histogram it for you
widthScale = d3.scaleLinear()
yScale = d3.scaleLinear()
- scales for the vertical and horizontal

Full-feature integration approach
- React talks to the DOM
- D3 calc the props

Use 2 components
- histogram
-- makes the general layout
-- dealing with D3
-- translating raw data into a histogram
- histogramBar
-- draws a single bar and labels it

--- Rendering the histogram
- get the histogram
- get the bars 
-- get histogram data
- get count
-- counting the bars
- width scale
-- determined by the bottom and the top counts 
- y scale
-- goes from 0 to the maximum of the values in the bars
-- bars has all of the dataset, we can use d3.max to get the maximum of all the bars

bars 
- dataset of all the histogram

histogram adjusts its width according to the size of the data (bins)

return grouping <g> element
add className histogram
move it by using transform
group <g> all the bars
- map through the bars and return HistogramBar
<HistogramBar 
  percent={(bar.length / data.length) * 100} 
  x={axisMargin}
  y={yScale(bar.x1)}
  width={widthScale(bar.length)}
  height={yScale(bar.x0) - yScale(bar.x1)}
  key=`{histogram-bar-${bar.x0}`} />
- use x in yScale cuz the histogram is horizontal

HistogramBar
- we will define

// histogram generator
const histogram = d3
  .histogram()
  // thresholds specifies how many bins we want
  .thresholds(bins)
  // value specifies the value accessor function
  .value(value); // in this case it returns base_salary

print histogram
- array structure where each entry holds metadata about the bin and values it contains

// horizontal scale
const widthScale = d3
  .scaleLinear()
  // map min and max of count to range
  .domain([d3.min(counts), d3.max(counts)])
  .range([0, width - axisMargin]);
- has a range from smallest min bin to the largest 
- range of 0 to width less a margin
- use to calculate bar size

// vertical scale
const yScale = d3
  .scaleLinear()
  // get the max of all the bars x coord cuz horizontal chart
  // map 0 and max to range
  .domain([0, d3.max(bars, (b) => d.x1)])
  .range([height - y - bottomMargin, 0]);
- range from 0 to largest x1 coordinate we can find in a bin
- bins go from x0 to x1
- most histograms are horizontally oriented
- ours is vertical so labels are easier to read


--- Step 4 HistogramBar (sub)component
- put everything that is not used by anything else in the same file
- write small components like this in the same file as their main component
- they're not reusable since they fit a specific use-case
- theyre small enough so your files don't get too crazy


--- Step 5 Axis
black box integration of Axis


Make it understandable - meta info
----------------------------------

Dynamic title
- what people are looking at
description
median line above the histogram

--- Dynamic title
import {Title} from Meta
// support for filtering
add filteredBy state
- show all USState, year, jobTitle

use these as props to insert into Title

set up App component for future user-controlled data filtering
- filteredBy
-- tells us what users are filtering by 
3 options
- USState, year, jobTitle

USStateMap
- dictionary that translate US state codes to full names


--- Building Title
yearsFragment
- get the year and return string of year

USStateFragment
- get the state adn return state from state map

import { scaleLinear } from 'd3-scale'
import { mean as d3mean, extent as d3extent } from 'd3-array'
- mean is the avg
- extent gives the full array from min to the biggest number

format function
creates a new linear scale that takes in the extent of the data base on the base_salary
return a tick formatter
- HOF cuz it returns a function
- tickFormat()
-- we put in a number and it will pretty print that number for us or format for us

jobTitleFragment
- job title string description of what we are looking at

render
- start with the average and format based on salary

D3's tickFormat
- Linear scales turn 10000 to 10,000
- tick formatters don't work well without a domain
- dont need a range cuz we never use the scale itself

--- The Render
- mean 
-- gets the mean of filteredSalaries based on base_salary
-- runs it through the tick formatter


--- Dynamic description
Add imports in App
Add component to App render
Implement component in components/Meta
Use getters for sentence fragments
Play with conditionals to construct different sentences


Overlay a median household line
median dotted line
- shows direct comparison btw the histogram's distribution and the median household income in an area

--- Step 1 App
import MedianLine component
MedianLine comes after the Histogram so that it overlays it
value accessor for dynamic reading of the dataset

medianIncomesByUSState groups salary data by US state

MedianLine
- give it sizing and positioning props
- dataset
- value accessor
- median value to show
-- this way it doesn't have to calc the median

--- Step 2 MedianLine
linearScale for the vertical positioning
line = d3.line()
- line generator
- helps us create a straight line
- builds the d attribute for the path
- comes from the d3-shape package
- generates splines or polylines
- by default it takes an array of points and builds a line through them all
- span the entire width and leave 5px for the label
get the median or calc median ourselves
move the line to the yScale
add a label
render the component
move medianHousehold after data is load

css
stroke-dasharray: 3
- 3px dash follow by 3px blank
other styles
- https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray



Add user controls for data slicing and dicing
=============================================

filters for users to interact with viz
- 2 years
- 12 job titles
- 50 states

click a button updates a filter function
-> communicates all the way up the App component
-> App updates the filteredSalaries
-> this triggers re-render and updates data viz

build controls in 4 steps top to bottom
1 update App with filtering and a <Controls> render
2 Build Controls component
- builds the filter based on inputs
3 Build ControlRow component
- handles a row of buttons
4 Build Toggle component
- a button

--- Update App
import Controls
const [salariesFilter, setSalariesFilter] = useState(() => true)
- add salariesFilter with state cb true
updateDataFilter
- updates the filter states
update filteredSalaries = techSalaries.filter(salariesFilter)
- it will filter everything by default

if (filteredBy.USState !== '*')
zoom = filteredBy.USState
medianHousehold = d3.mean(
  medianIncomesByUSState[zoom],
  (d) => d.medianIncomes
)
- get the mean income of the zoom state

add a white rectangle underneath histogram that matches x, y width and height

render controls after </svg> because it's not a SVG component
- just a normal HTML
- use updateDataFilter prop to say which callback it should call when a new filter is ready


--- Step 2 Build controls component
-yearFilter

--- Filter Logic
setFilteredBy((filteredBy) => {
  return {...filteredBy, year };
});
- updated the year and also update a bunch of things
setFilter((filter) => {
  return {...filterFunctions, year: yearFilter };
});

reportUpdateUpTheChain
- calls the update method in the prop to tell app to rerender

ControlRow
- data: 
-- give it data
- toggleNames
-- set of toggleNames
- updateDataFilter
-- callback to update the filter
- picked
-- which entry is picked right now

Step 3 Build ControlRow component


Step 5 Add US state and Job Title filters
add USState and jobTitle


REal World
============

Controls
add useEffect to add routing
useEffect in controls to read the URL when controls first loads


--- Twitter and Facebook cards and SEO
- can use react helmet
- going to keep it simple and keep it into the index.html
- add title
- add some text to load in case the content doesn't load fast enough
- add some meta

how visualizations look on social media matters and it is easy to set up
public/index.html
- title
- twitter cards
- facebook open graph 

<link rel="canonical" href="..." />
- tells the search engine that a specific URL represents the master copy of a page
- prevents duplicate issues
- tells the original source and improves SEO
- important for when people copy and paste your content and put it on other websites

add some default text before the preloader is loaded
As soon as React loads, these get overwritten with our preloader, but it's good to have them here for any search engines that aren't running JavaScript yet. I think both Google and Bing are capable of running our React app and getting text from there, but you never know.

make social media embeds look great
- use twitter card
- facebook opengraph

<head>
    <meta property="og:locale" content="en_US" />
    <meta property="og:type" content="article" />
    <meta property="og:title"
          content="The average H1B in tech pays $86,164/year" />
    <meta property="og:description"
          content="Since 2012 the US tech industry has sponsored
176,075 H1B work visas. With an average individual salary
up to $39,465 above median household income." />
    <meta property="og:url"
          content="https://swizec.github.io/react-d3-walkthrough-livecode" />
    <meta property="og:site_name" content="A geek with a hat" />
    <meta property="article:publisher"
          content="https://facebook.com/swizecpage" />
    <meta property="fb:admins" content="624156314" />
    <meta property="og:image"
          content="https://swizec.github.io/react-d3js-step-by-step/thumbnail.png" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:description"
          content="Since 2012 the US tech industry has sponsored
176,075 H1B work visas. With an average individual salary
up to $39,465 above median household income." />
    <meta name="twitter:title"
          content="The average H1B in tech pays $86,164/year" />
    <meta name="twitter:site" content="@swizec" />
    <meta name="twitter:image"
          content="https://swizec.github.io/react-d3js-step-by-step/thumbnail.png" />
    <meta name="twitter:creator" content="@swizec" />
</head>

make sure to change og:url, og:site_name, article:publisher, fb:admins, og:image, twitter:site, twitter:image, and twitter:creator
- An important one is fb:admin. 
-- It enables admin features on your site if you add their social plugins

npm i now -g
now
